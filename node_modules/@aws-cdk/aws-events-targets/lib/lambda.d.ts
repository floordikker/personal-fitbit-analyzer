import * as events from '@aws-cdk/aws-events';
import * as lambda from '@aws-cdk/aws-lambda';
import * as sqs from '@aws-cdk/aws-sqs';
/**
 * Customize the Lambda Event Target.
 *
 * @stability stable
 */
export interface LambdaFunctionProps {
    /**
     * The event to send to the Lambda.
     *
     * This will be the payload sent to the Lambda Function.
     *
     * @default the entire EventBridge event
     * @stability stable
     */
    readonly event?: events.RuleTargetInput;
    /**
     * The SQS queue to be used as deadLetterQueue. Check out the [considerations for using a dead-letter queue](https://docs.aws.amazon.com/eventbridge/latest/userguide/rule-dlq.html#dlq-considerations).
     *
     * The events not successfully delivered are automatically retried for a specified period of time,
     * depending on the retry policy of the target.
     * If an event is not delivered before all retry attempts are exhausted, it will be sent to the dead letter queue.
     *
     * @default - no dead-letter queue
     * @stability stable
     */
    readonly deadLetterQueue?: sqs.IQueue;
}
/**
 * Use an AWS Lambda function as an event rule target.
 *
 * @stability stable
 */
export declare class LambdaFunction implements events.IRuleTarget {
    private readonly handler;
    private readonly props;
    /**
     * @stability stable
     */
    constructor(handler: lambda.IFunction, props?: LambdaFunctionProps);
    /**
     * Returns a RuleTarget that can be used to trigger this Lambda as a result from an EventBridge event.
     *
     * @stability stable
     */
    bind(rule: events.IRule, _id?: string): events.RuleTargetConfig;
}
